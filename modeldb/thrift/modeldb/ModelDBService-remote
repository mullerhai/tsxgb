#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol
from .ModelDBService import *
from .ttypes import *
# from .modeldb import ModelDBService
# from .modeldb.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i32 testConnection()')
  print('  i32 storeDataFrame(DataFrame df, i32 experimentRunId)')
  print('  string pathForTransformer(i32 transformerId)')
  print('  FitEventResponse storeFitEvent(FitEvent fe)')
  print('  MetricEventResponse storeMetricEvent(MetricEvent me)')
  print('  string getFilePath(Transformer t, i32 experimentRunId, string filename)')
  print('  TransformEventResponse storeTransformEvent(TransformEvent te)')
  print('  RandomSplitEventResponse storeRandomSplitEvent(RandomSplitEvent rse)')
  print('  PipelineEventResponse storePipelineEvent(PipelineEvent pipelineEvent)')
  print('  CrossValidationEventResponse storeCrossValidationEvent(CrossValidationEvent cve)')
  print('  GridSearchCrossValidationEventResponse storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve)')
  print('  AnnotationEventResponse storeAnnotationEvent(AnnotationEvent ae)')
  print('  ProjectEventResponse storeProjectEvent(ProjectEvent pr)')
  print('  ExperimentEventResponse storeExperimentEvent(ExperimentEvent er)')
  print('  ExperimentRunEventResponse storeExperimentRunEvent(ExperimentRunEvent er)')
  print('  bool storeLinearModel(i32 modelId, LinearModel model)')
  print('  DataFrameAncestry getDataFrameAncestry(i32 dataFrameId)')
  print('  CommonAncestor getCommonAncestor(i32 dfId1, i32 dfId2)')
  print('  CommonAncestor getCommonAncestorForModels(i32 modelId1, i32 modelId2)')
  print('  i32 getTrainingRowsCount(i32 modelId)')
  print('   getTrainingRowsCounts( modelIds)')
  print('  CompareHyperParametersResponse compareHyperparameters(i32 modelId1, i32 modelId2)')
  print('  CompareFeaturesResponse compareFeatures(i32 modelId1, i32 modelId2)')
  print('   groupByProblemType( modelIds)')
  print('   similarModels(i32 modelId,  compMetrics, i32 numModels)')
  print('   linearModelFeatureImportances(i32 modelId)')
  print('   compareLinearModelFeatureImportances(i32 model1Id, i32 model2Id)')
  print('   iterationsUntilConvergence( modelIds, double tolerance)')
  print('   rankModels( modelIds, ModelRankMetric metric)')
  print('   confidenceIntervals(i32 modelId, double sigLevel)')
  print('   modelsWithFeatures( featureNames)')
  print('   modelsDerivedFromDataFrame(i32 dfId)')
  print('   getProjectIds( keyValuePairs)')
  print('   getModelIds( keyValuePairs)')
  print('  bool updateProject(i32 projectId, string key, string value)')
  print('  bool createOrUpdateScalarField(i32 modelId, string key, string value, string valueType)')
  print('  bool createVectorField(i32 modelId, string vectorName,  vectorConfig)')
  print('  bool updateVectorField(i32 modelId, string key, i32 valueIndex, string value, string valueType)')
  print('  bool appendToVectorField(i32 modelId, string vectorName, string value, string valueType)')
  print('  ModelResponse getModel(i32 modelId)')
  print('   getRunsInExperiment(i32 experimentId)')
  print('  ProjectExperimentsAndRuns getRunsAndExperimentsInProject(i32 projId)')
  print('   getProjectOverviews()')
  print('  ExperimentRunDetailsResponse getExperimentRunDetails(i32 experimentRunId)')
  print('   originalFeatures(i32 modelId)')
  print('  bool storeTreeModel(i32 modelId, TreeModel model)')
  print('   storePipelineTransformEvent( te)')
  print('  ModelAncestryResponse computeModelAncestry(i32 modelId)')
  print('  ExtractedPipelineResponse extractPipeline(i32 modelId)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ModelDBService.Client(protocol)
transport.open()

if cmd == 'testConnection':
  if len(args) != 0:
    print('testConnection requires 0 args')
    sys.exit(1)
  pp.pprint(client.testConnection())

elif cmd == 'storeDataFrame':
  if len(args) != 2:
    print('storeDataFrame requires 2 args')
    sys.exit(1)
  pp.pprint(client.storeDataFrame(eval(args[0]),eval(args[1]),))

elif cmd == 'pathForTransformer':
  if len(args) != 1:
    print('pathForTransformer requires 1 args')
    sys.exit(1)
  pp.pprint(client.pathForTransformer(eval(args[0]),))

elif cmd == 'storeFitEvent':
  if len(args) != 1:
    print('storeFitEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeFitEvent(eval(args[0]),))

elif cmd == 'storeMetricEvent':
  if len(args) != 1:
    print('storeMetricEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeMetricEvent(eval(args[0]),))

elif cmd == 'getFilePath':
  if len(args) != 3:
    print('getFilePath requires 3 args')
    sys.exit(1)
  pp.pprint(client.getFilePath(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'storeTransformEvent':
  if len(args) != 1:
    print('storeTransformEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeTransformEvent(eval(args[0]),))

elif cmd == 'storeRandomSplitEvent':
  if len(args) != 1:
    print('storeRandomSplitEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeRandomSplitEvent(eval(args[0]),))

elif cmd == 'storePipelineEvent':
  if len(args) != 1:
    print('storePipelineEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storePipelineEvent(eval(args[0]),))

elif cmd == 'storeCrossValidationEvent':
  if len(args) != 1:
    print('storeCrossValidationEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeCrossValidationEvent(eval(args[0]),))

elif cmd == 'storeGridSearchCrossValidationEvent':
  if len(args) != 1:
    print('storeGridSearchCrossValidationEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeGridSearchCrossValidationEvent(eval(args[0]),))

elif cmd == 'storeAnnotationEvent':
  if len(args) != 1:
    print('storeAnnotationEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeAnnotationEvent(eval(args[0]),))

elif cmd == 'storeProjectEvent':
  if len(args) != 1:
    print('storeProjectEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeProjectEvent(eval(args[0]),))

elif cmd == 'storeExperimentEvent':
  if len(args) != 1:
    print('storeExperimentEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeExperimentEvent(eval(args[0]),))

elif cmd == 'storeExperimentRunEvent':
  if len(args) != 1:
    print('storeExperimentRunEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storeExperimentRunEvent(eval(args[0]),))

elif cmd == 'storeLinearModel':
  if len(args) != 2:
    print('storeLinearModel requires 2 args')
    sys.exit(1)
  pp.pprint(client.storeLinearModel(eval(args[0]),eval(args[1]),))

elif cmd == 'getDataFrameAncestry':
  if len(args) != 1:
    print('getDataFrameAncestry requires 1 args')
    sys.exit(1)
  pp.pprint(client.getDataFrameAncestry(eval(args[0]),))

elif cmd == 'getCommonAncestor':
  if len(args) != 2:
    print('getCommonAncestor requires 2 args')
    sys.exit(1)
  pp.pprint(client.getCommonAncestor(eval(args[0]),eval(args[1]),))

elif cmd == 'getCommonAncestorForModels':
  if len(args) != 2:
    print('getCommonAncestorForModels requires 2 args')
    sys.exit(1)
  pp.pprint(client.getCommonAncestorForModels(eval(args[0]),eval(args[1]),))

elif cmd == 'getTrainingRowsCount':
  if len(args) != 1:
    print('getTrainingRowsCount requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTrainingRowsCount(eval(args[0]),))

elif cmd == 'getTrainingRowsCounts':
  if len(args) != 1:
    print('getTrainingRowsCounts requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTrainingRowsCounts(eval(args[0]),))

elif cmd == 'compareHyperparameters':
  if len(args) != 2:
    print('compareHyperparameters requires 2 args')
    sys.exit(1)
  pp.pprint(client.compareHyperparameters(eval(args[0]),eval(args[1]),))

elif cmd == 'compareFeatures':
  if len(args) != 2:
    print('compareFeatures requires 2 args')
    sys.exit(1)
  pp.pprint(client.compareFeatures(eval(args[0]),eval(args[1]),))

elif cmd == 'groupByProblemType':
  if len(args) != 1:
    print('groupByProblemType requires 1 args')
    sys.exit(1)
  pp.pprint(client.groupByProblemType(eval(args[0]),))

elif cmd == 'similarModels':
  if len(args) != 3:
    print('similarModels requires 3 args')
    sys.exit(1)
  pp.pprint(client.similarModels(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'linearModelFeatureImportances':
  if len(args) != 1:
    print('linearModelFeatureImportances requires 1 args')
    sys.exit(1)
  pp.pprint(client.linearModelFeatureImportances(eval(args[0]),))

elif cmd == 'compareLinearModelFeatureImportances':
  if len(args) != 2:
    print('compareLinearModelFeatureImportances requires 2 args')
    sys.exit(1)
  pp.pprint(client.compareLinearModelFeatureImportances(eval(args[0]),eval(args[1]),))

elif cmd == 'iterationsUntilConvergence':
  if len(args) != 2:
    print('iterationsUntilConvergence requires 2 args')
    sys.exit(1)
  pp.pprint(client.iterationsUntilConvergence(eval(args[0]),eval(args[1]),))

elif cmd == 'rankModels':
  if len(args) != 2:
    print('rankModels requires 2 args')
    sys.exit(1)
  pp.pprint(client.rankModels(eval(args[0]),eval(args[1]),))

elif cmd == 'confidenceIntervals':
  if len(args) != 2:
    print('confidenceIntervals requires 2 args')
    sys.exit(1)
  pp.pprint(client.confidenceIntervals(eval(args[0]),eval(args[1]),))

elif cmd == 'modelsWithFeatures':
  if len(args) != 1:
    print('modelsWithFeatures requires 1 args')
    sys.exit(1)
  pp.pprint(client.modelsWithFeatures(eval(args[0]),))

elif cmd == 'modelsDerivedFromDataFrame':
  if len(args) != 1:
    print('modelsDerivedFromDataFrame requires 1 args')
    sys.exit(1)
  pp.pprint(client.modelsDerivedFromDataFrame(eval(args[0]),))

elif cmd == 'getProjectIds':
  if len(args) != 1:
    print('getProjectIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.getProjectIds(eval(args[0]),))

elif cmd == 'getModelIds':
  if len(args) != 1:
    print('getModelIds requires 1 args')
    sys.exit(1)
  pp.pprint(client.getModelIds(eval(args[0]),))

elif cmd == 'updateProject':
  if len(args) != 3:
    print('updateProject requires 3 args')
    sys.exit(1)
  pp.pprint(client.updateProject(eval(args[0]),args[1],args[2],))

elif cmd == 'createOrUpdateScalarField':
  if len(args) != 4:
    print('createOrUpdateScalarField requires 4 args')
    sys.exit(1)
  pp.pprint(client.createOrUpdateScalarField(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'createVectorField':
  if len(args) != 3:
    print('createVectorField requires 3 args')
    sys.exit(1)
  pp.pprint(client.createVectorField(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'updateVectorField':
  if len(args) != 5:
    print('updateVectorField requires 5 args')
    sys.exit(1)
  pp.pprint(client.updateVectorField(eval(args[0]),args[1],eval(args[2]),args[3],args[4],))

elif cmd == 'appendToVectorField':
  if len(args) != 4:
    print('appendToVectorField requires 4 args')
    sys.exit(1)
  pp.pprint(client.appendToVectorField(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'getModel':
  if len(args) != 1:
    print('getModel requires 1 args')
    sys.exit(1)
  pp.pprint(client.getModel(eval(args[0]),))

elif cmd == 'getRunsInExperiment':
  if len(args) != 1:
    print('getRunsInExperiment requires 1 args')
    sys.exit(1)
  pp.pprint(client.getRunsInExperiment(eval(args[0]),))

elif cmd == 'getRunsAndExperimentsInProject':
  if len(args) != 1:
    print('getRunsAndExperimentsInProject requires 1 args')
    sys.exit(1)
  pp.pprint(client.getRunsAndExperimentsInProject(eval(args[0]),))

elif cmd == 'getProjectOverviews':
  if len(args) != 0:
    print('getProjectOverviews requires 0 args')
    sys.exit(1)
  pp.pprint(client.getProjectOverviews())

elif cmd == 'getExperimentRunDetails':
  if len(args) != 1:
    print('getExperimentRunDetails requires 1 args')
    sys.exit(1)
  pp.pprint(client.getExperimentRunDetails(eval(args[0]),))

elif cmd == 'originalFeatures':
  if len(args) != 1:
    print('originalFeatures requires 1 args')
    sys.exit(1)
  pp.pprint(client.originalFeatures(eval(args[0]),))

elif cmd == 'storeTreeModel':
  if len(args) != 2:
    print('storeTreeModel requires 2 args')
    sys.exit(1)
  pp.pprint(client.storeTreeModel(eval(args[0]),eval(args[1]),))

elif cmd == 'storePipelineTransformEvent':
  if len(args) != 1:
    print('storePipelineTransformEvent requires 1 args')
    sys.exit(1)
  pp.pprint(client.storePipelineTransformEvent(eval(args[0]),))

elif cmd == 'computeModelAncestry':
  if len(args) != 1:
    print('computeModelAncestry requires 1 args')
    sys.exit(1)
  pp.pprint(client.computeModelAncestry(eval(args[0]),))

elif cmd == 'extractPipeline':
  if len(args) != 1:
    print('extractPipeline requires 1 args')
    sys.exit(1)
  pp.pprint(client.extractPipeline(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
